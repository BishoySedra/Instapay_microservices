services:
  rabbitmq:
    image: rabbitmq:3-management
    healthcheck:
      test: ["CMD", "rabbitmqctl", "status"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    networks:
      - mini-insta-network

  user-mongo:
    image: mongo
    volumes:
      - user-data:/data/db
    networks:
      - mini-insta-network

  transaction-mongo:
    image: mongo
    volumes:
      - transaction-data:/data/db
    networks:
      - mini-insta-network

  report-mongo:
    image: mongo
    volumes:
      - report-data:/data/db
    networks:
      - mini-insta-network

  notification-mongo:
    image: mongo
    volumes:
      - notification-data:/data/db
    networks:
      - mini-insta-network

  user-service:
    build: ./user-service
    environment:
      - NODE_ENV=${NODE_ENV}  # Dynamically set based on environment
      - LOG_LEVEL=${LOG_LEVEL}  # Dynamically set based on environment
      - MONGO_URI=${MONGO_URI_USER}
      - RABBITMQ_URL=${RABBITMQ_URL}
      - PORT=3001
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      rabbitmq:
        condition: service_healthy
      user-mongo:
        condition: service_started
    networks:
      - mini-insta-network

  transaction-service:
    build: ./transaction-service
    environment:
      - NODE_ENV=${NODE_ENV}  # Dynamically set based on environment
      - LOG_LEVEL=${LOG_LEVEL}  # Dynamically set based on environment
      - MONGO_URI=${MONGO_URI_TRANSACTION}
      - RABBITMQ_URL=${RABBITMQ_URL}
      - JWT_SECRET=${JWT_SECRET}
      - PORT=3002
    depends_on:
      rabbitmq:
        condition: service_healthy
      transaction-mongo:
        condition: service_started
    networks:
      - mini-insta-network

  report-service:
    build: ./report-service
    environment:
      - NODE_ENV=${NODE_ENV}  # Dynamically set based on environment
      - LOG_LEVEL=${LOG_LEVEL}  # Dynamically set based on environment
      - MONGO_URI=${MONGO_URI_REPORT}
      - RABBITMQ_URL=${RABBITMQ_URL}
      - PORT=3003
      - JWT_SECRET=${JWT_SECRET}
    depends_on:
      rabbitmq:
        condition: service_healthy
      report-mongo:
        condition: service_started
    networks:
      - mini-insta-network

  notification-service:
    build: ./notification-service
    environment:
      - NODE_ENV=${NODE_ENV}  # Dynamically set based on environment
      - LOG_LEVEL=${LOG_LEVEL}  # Dynamically set based on environment
      - MONGO_URI=${MONGO_URI_NOTIFICATION}
      - RABBITMQ_URL=${RABBITMQ_URL}
      - JWT_SECRET=${JWT_SECRET}
      - PORT=3004
    depends_on:
      rabbitmq:
        condition: service_healthy
      notification-mongo:
        condition: service_started
    networks:
      - mini-insta-network

  frontend:
    build:
      context: ./client
      args:
        VITE_MODE: ${VITE_MODE}  # Pass VITE_MODE to Dockerfile
    environment:
      - NODE_ENV=${NODE_ENV}  # Dynamically set based on environment
      - VITE_MODE=${VITE_MODE}  # Dynamically set based on environment
      - VITE_USER_SERVICE_URL=${VITE_USER_SERVICE_URL}
      - VITE_TRANSACTION_SERVICE_URL=${VITE_TRANSACTION_SERVICE_URL}
      - VITE_REPORT_SERVICE_URL=${VITE_REPORT_SERVICE_URL}
      - VITE_NOTIFICATION_SERVICE_URL=${VITE_NOTIFICATION_SERVICE_URL}
    depends_on:
      - user-service
      - transaction-service
      - report-service
      - notification-service
    networks:
      - mini-insta-network
    volumes:
      - ./client:/app  # Live reload for dev environment only, can be overridden for staging/production

        

networks:
  mini-insta-network:
    # driver: bridge

volumes:
  user-data:
  transaction-data:
  report-data:
  notification-data: